// Generated by gencpp from file stroll_bearnav/PathProfile.msg
// DO NOT EDIT!


#ifndef STROLL_BEARNAV_MESSAGE_PATHPROFILE_H
#define STROLL_BEARNAV_MESSAGE_PATHPROFILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stroll_bearnav
{
template <class ContainerAllocator>
struct PathProfile_
{
  typedef PathProfile_<ContainerAllocator> Type;

  PathProfile_()
    : distance()
    , forwardSpeed()
    , angularSpeed()
    , flipper()  {
    }
  PathProfile_(const ContainerAllocator& _alloc)
    : distance(_alloc)
    , forwardSpeed(_alloc)
    , angularSpeed(_alloc)
    , flipper(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distance_type;
  _distance_type distance;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _forwardSpeed_type;
  _forwardSpeed_type forwardSpeed;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angularSpeed_type;
  _angularSpeed_type angularSpeed;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _flipper_type;
  _flipper_type flipper;





  typedef boost::shared_ptr< ::stroll_bearnav::PathProfile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stroll_bearnav::PathProfile_<ContainerAllocator> const> ConstPtr;

}; // struct PathProfile_

typedef ::stroll_bearnav::PathProfile_<std::allocator<void> > PathProfile;

typedef boost::shared_ptr< ::stroll_bearnav::PathProfile > PathProfilePtr;
typedef boost::shared_ptr< ::stroll_bearnav::PathProfile const> PathProfileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stroll_bearnav::PathProfile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stroll_bearnav::PathProfile_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stroll_bearnav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'stroll_bearnav': ['/home/kevin/jaguar_ws/src/stroll_bearnav/msg', '/home/kevin/jaguar_ws/src/stroll_bearnav/cmake-build-debug/devel/share/stroll_bearnav/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::PathProfile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::PathProfile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::PathProfile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1915db84c0f5e0644fc19db32af4bed";
  }

  static const char* value(const ::stroll_bearnav::PathProfile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1915db84c0f5e06ULL;
  static const uint64_t static_value2 = 0x44fc19db32af4bedULL;
};

template<class ContainerAllocator>
struct DataType< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stroll_bearnav/PathProfile";
  }

  static const char* value(const ::stroll_bearnav::PathProfile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] distance\n\
float32[] forwardSpeed\n\
float32[] angularSpeed\n\
float32[] flipper\n\
";
  }

  static const char* value(const ::stroll_bearnav::PathProfile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.forwardSpeed);
      stream.next(m.angularSpeed);
      stream.next(m.flipper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathProfile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stroll_bearnav::PathProfile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stroll_bearnav::PathProfile_<ContainerAllocator>& v)
  {
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "forwardSpeed[]" << std::endl;
    for (size_t i = 0; i < v.forwardSpeed.size(); ++i)
    {
      s << indent << "  forwardSpeed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.forwardSpeed[i]);
    }
    s << indent << "angularSpeed[]" << std::endl;
    for (size_t i = 0; i < v.angularSpeed.size(); ++i)
    {
      s << indent << "  angularSpeed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angularSpeed[i]);
    }
    s << indent << "flipper[]" << std::endl;
    for (size_t i = 0; i < v.flipper.size(); ++i)
    {
      s << indent << "  flipper[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.flipper[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STROLL_BEARNAV_MESSAGE_PATHPROFILE_H
