// Generated by gencpp from file stroll_bearnav/loadMapResult.msg
// DO NOT EDIT!


#ifndef STROLL_BEARNAV_MESSAGE_LOADMAPRESULT_H
#define STROLL_BEARNAV_MESSAGE_LOADMAPRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stroll_bearnav
{
template <class ContainerAllocator>
struct loadMapResult_
{
  typedef loadMapResult_<ContainerAllocator> Type;

  loadMapResult_()
    : distance(0.0)
    , numFeatures(0)
    , numMaps(0)  {
    }
  loadMapResult_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , numFeatures(0)
    , numMaps(0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef int32_t _numFeatures_type;
  _numFeatures_type numFeatures;

   typedef int32_t _numMaps_type;
  _numMaps_type numMaps;





  typedef boost::shared_ptr< ::stroll_bearnav::loadMapResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stroll_bearnav::loadMapResult_<ContainerAllocator> const> ConstPtr;

}; // struct loadMapResult_

typedef ::stroll_bearnav::loadMapResult_<std::allocator<void> > loadMapResult;

typedef boost::shared_ptr< ::stroll_bearnav::loadMapResult > loadMapResultPtr;
typedef boost::shared_ptr< ::stroll_bearnav::loadMapResult const> loadMapResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stroll_bearnav::loadMapResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stroll_bearnav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'stroll_bearnav': ['/home/kevin/jaguar_ws/src/stroll_bearnav/msg', '/home/kevin/jaguar_ws/src/stroll_bearnav/cmake-build-debug/devel/share/stroll_bearnav/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::loadMapResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::loadMapResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::loadMapResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8612f9000e7ffda9ca4803adc8bf9cf9";
  }

  static const char* value(const ::stroll_bearnav::loadMapResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8612f9000e7ffda9ULL;
  static const uint64_t static_value2 = 0xca4803adc8bf9cf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stroll_bearnav/loadMapResult";
  }

  static const char* value(const ::stroll_bearnav::loadMapResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
float32 distance\n\
int32 numFeatures\n\
int32 numMaps\n\
";
  }

  static const char* value(const ::stroll_bearnav::loadMapResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.numFeatures);
      stream.next(m.numMaps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct loadMapResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stroll_bearnav::loadMapResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stroll_bearnav::loadMapResult_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "numFeatures: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numFeatures);
    s << indent << "numMaps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numMaps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STROLL_BEARNAV_MESSAGE_LOADMAPRESULT_H
