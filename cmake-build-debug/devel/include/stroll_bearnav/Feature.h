// Generated by gencpp from file stroll_bearnav/Feature.msg
// DO NOT EDIT!


#ifndef STROLL_BEARNAV_MESSAGE_FEATURE_H
#define STROLL_BEARNAV_MESSAGE_FEATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stroll_bearnav
{
template <class ContainerAllocator>
struct Feature_
{
  typedef Feature_<ContainerAllocator> Type;

  Feature_()
    : x(0.0)
    , y(0.0)
    , size(0.0)
    , angle(0.0)
    , response(0.0)
    , octave(0)
    , class_id(0)
    , descriptor()
    , rating(0.0)  {
    }
  Feature_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , size(0.0)
    , angle(0.0)
    , response(0.0)
    , octave(0)
    , class_id(0)
    , descriptor(_alloc)
    , rating(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _size_type;
  _size_type size;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _response_type;
  _response_type response;

   typedef int32_t _octave_type;
  _octave_type octave;

   typedef int32_t _class_id_type;
  _class_id_type class_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptor_type;
  _descriptor_type descriptor;

   typedef float _rating_type;
  _rating_type rating;





  typedef boost::shared_ptr< ::stroll_bearnav::Feature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stroll_bearnav::Feature_<ContainerAllocator> const> ConstPtr;

}; // struct Feature_

typedef ::stroll_bearnav::Feature_<std::allocator<void> > Feature;

typedef boost::shared_ptr< ::stroll_bearnav::Feature > FeaturePtr;
typedef boost::shared_ptr< ::stroll_bearnav::Feature const> FeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stroll_bearnav::Feature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stroll_bearnav::Feature_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stroll_bearnav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'stroll_bearnav': ['/home/kevin/jaguar_ws/src/stroll_bearnav/msg', '/home/kevin/jaguar_ws/src/stroll_bearnav/cmake-build-debug/devel/share/stroll_bearnav/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::Feature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::Feature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::Feature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::Feature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::Feature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::Feature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stroll_bearnav::Feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fee28b7b26e4a1bbd92f2b4f4726cd5";
  }

  static const char* value(const ::stroll_bearnav::Feature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fee28b7b26e4a1bULL;
  static const uint64_t static_value2 = 0xbd92f2b4f4726cd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::stroll_bearnav::Feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stroll_bearnav/Feature";
  }

  static const char* value(const ::stroll_bearnav::Feature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stroll_bearnav::Feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n\
float32 y\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int32 octave\n\
int32 class_id\n\
float32[] descriptor\n\
float32 rating\n\
";
  }

  static const char* value(const ::stroll_bearnav::Feature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stroll_bearnav::Feature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.size);
      stream.next(m.angle);
      stream.next(m.response);
      stream.next(m.octave);
      stream.next(m.class_id);
      stream.next(m.descriptor);
      stream.next(m.rating);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stroll_bearnav::Feature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stroll_bearnav::Feature_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "response: ";
    Printer<float>::stream(s, indent + "  ", v.response);
    s << indent << "octave: ";
    Printer<int32_t>::stream(s, indent + "  ", v.octave);
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "descriptor[]" << std::endl;
    for (size_t i = 0; i < v.descriptor.size(); ++i)
    {
      s << indent << "  descriptor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptor[i]);
    }
    s << indent << "rating: ";
    Printer<float>::stream(s, indent + "  ", v.rating);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STROLL_BEARNAV_MESSAGE_FEATURE_H
