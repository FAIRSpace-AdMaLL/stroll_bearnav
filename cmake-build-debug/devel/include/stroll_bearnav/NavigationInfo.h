// Generated by gencpp from file stroll_bearnav/NavigationInfo.msg
// DO NOT EDIT!


#ifndef STROLL_BEARNAV_MESSAGE_NAVIGATIONINFO_H
#define STROLL_BEARNAV_MESSAGE_NAVIGATIONINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <stroll_bearnav/FeatureArray.h>
#include <stroll_bearnav/FeatureArray.h>

namespace stroll_bearnav
{
template <class ContainerAllocator>
struct NavigationInfo_
{
  typedef NavigationInfo_<ContainerAllocator> Type;

  NavigationInfo_()
    : ratio(0.0)
    , map()
    , view()
    , histogram()
    , mapMatchIndex()
    , mapMatchEval()
    , correct(0)
    , matches(0)
    , distance(0.0)
    , diffRot(0.0)
    , mapChanges(0)
    , updated(false)  {
    }
  NavigationInfo_(const ContainerAllocator& _alloc)
    : ratio(0.0)
    , map(_alloc)
    , view(_alloc)
    , histogram(_alloc)
    , mapMatchIndex(_alloc)
    , mapMatchEval(_alloc)
    , correct(0)
    , matches(0)
    , distance(0.0)
    , diffRot(0.0)
    , mapChanges(0)
    , updated(false)  {
  (void)_alloc;
    }



   typedef float _ratio_type;
  _ratio_type ratio;

   typedef  ::stroll_bearnav::FeatureArray_<ContainerAllocator>  _map_type;
  _map_type map;

   typedef  ::stroll_bearnav::FeatureArray_<ContainerAllocator>  _view_type;
  _view_type view;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _histogram_type;
  _histogram_type histogram;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _mapMatchIndex_type;
  _mapMatchIndex_type mapMatchIndex;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _mapMatchEval_type;
  _mapMatchEval_type mapMatchEval;

   typedef int32_t _correct_type;
  _correct_type correct;

   typedef int32_t _matches_type;
  _matches_type matches;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _diffRot_type;
  _diffRot_type diffRot;

   typedef int32_t _mapChanges_type;
  _mapChanges_type mapChanges;

   typedef uint8_t _updated_type;
  _updated_type updated;





  typedef boost::shared_ptr< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationInfo_

typedef ::stroll_bearnav::NavigationInfo_<std::allocator<void> > NavigationInfo;

typedef boost::shared_ptr< ::stroll_bearnav::NavigationInfo > NavigationInfoPtr;
typedef boost::shared_ptr< ::stroll_bearnav::NavigationInfo const> NavigationInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stroll_bearnav::NavigationInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stroll_bearnav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'stroll_bearnav': ['/home/kevin/jaguar_ws/src/stroll_bearnav/msg', '/home/kevin/jaguar_ws/src/stroll_bearnav/cmake-build-debug/devel/share/stroll_bearnav/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82d671060d2954f62b3d0cce462cfb6c";
  }

  static const char* value(const ::stroll_bearnav::NavigationInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82d671060d2954f6ULL;
  static const uint64_t static_value2 = 0x2b3d0cce462cfb6cULL;
};

template<class ContainerAllocator>
struct DataType< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stroll_bearnav/NavigationInfo";
  }

  static const char* value(const ::stroll_bearnav::NavigationInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ratio                           #matching ratio\n\
stroll_bearnav/FeatureArray map         #features from the current map\n\
stroll_bearnav/FeatureArray view	#features from the current view\n\
int32[] histogram    			#navigation histogram\n\
int32[] mapMatchIndex			#contains indices of 'view' features corresponding to a given mapFeature\n\
int32[] mapMatchEval			#contains information of mapFeatures - correct 1, incorrect -1, unmatched 0\n\
int32 correct                   	#number of correct matches\n\
int32 matches                   	#number of good matches\n\
float32 distance                	#traveled distance\n\
float32 diffRot                 	#difference between features\n\
int32 mapChanges                	#number of traversals\n\
bool updated                    	#map contains rating\n\
\n\
================================================================================\n\
MSG: stroll_bearnav/FeatureArray\n\
Header header\n\
float32 distance\n\
string id \n\
stroll_bearnav/Feature[] feature\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: stroll_bearnav/Feature\n\
float32 x\n\
float32 y\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int32 octave\n\
int32 class_id\n\
float32[] descriptor\n\
float32 rating\n\
";
  }

  static const char* value(const ::stroll_bearnav::NavigationInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ratio);
      stream.next(m.map);
      stream.next(m.view);
      stream.next(m.histogram);
      stream.next(m.mapMatchIndex);
      stream.next(m.mapMatchEval);
      stream.next(m.correct);
      stream.next(m.matches);
      stream.next(m.distance);
      stream.next(m.diffRot);
      stream.next(m.mapChanges);
      stream.next(m.updated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stroll_bearnav::NavigationInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stroll_bearnav::NavigationInfo_<ContainerAllocator>& v)
  {
    s << indent << "ratio: ";
    Printer<float>::stream(s, indent + "  ", v.ratio);
    s << indent << "map: ";
    s << std::endl;
    Printer< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >::stream(s, indent + "  ", v.map);
    s << indent << "view: ";
    s << std::endl;
    Printer< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >::stream(s, indent + "  ", v.view);
    s << indent << "histogram[]" << std::endl;
    for (size_t i = 0; i < v.histogram.size(); ++i)
    {
      s << indent << "  histogram[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.histogram[i]);
    }
    s << indent << "mapMatchIndex[]" << std::endl;
    for (size_t i = 0; i < v.mapMatchIndex.size(); ++i)
    {
      s << indent << "  mapMatchIndex[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mapMatchIndex[i]);
    }
    s << indent << "mapMatchEval[]" << std::endl;
    for (size_t i = 0; i < v.mapMatchEval.size(); ++i)
    {
      s << indent << "  mapMatchEval[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mapMatchEval[i]);
    }
    s << indent << "correct: ";
    Printer<int32_t>::stream(s, indent + "  ", v.correct);
    s << indent << "matches: ";
    Printer<int32_t>::stream(s, indent + "  ", v.matches);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "diffRot: ";
    Printer<float>::stream(s, indent + "  ", v.diffRot);
    s << indent << "mapChanges: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mapChanges);
    s << indent << "updated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.updated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STROLL_BEARNAV_MESSAGE_NAVIGATIONINFO_H
