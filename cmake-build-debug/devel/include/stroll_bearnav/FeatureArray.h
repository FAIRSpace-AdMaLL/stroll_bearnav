// Generated by gencpp from file stroll_bearnav/FeatureArray.msg
// DO NOT EDIT!


#ifndef STROLL_BEARNAV_MESSAGE_FEATUREARRAY_H
#define STROLL_BEARNAV_MESSAGE_FEATUREARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <stroll_bearnav/Feature.h>

namespace stroll_bearnav
{
template <class ContainerAllocator>
struct FeatureArray_
{
  typedef FeatureArray_<ContainerAllocator> Type;

  FeatureArray_()
    : header()
    , distance(0.0)
    , id()
    , feature()  {
    }
  FeatureArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distance(0.0)
    , id(_alloc)
    , feature(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector< ::stroll_bearnav::Feature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::stroll_bearnav::Feature_<ContainerAllocator> >::other >  _feature_type;
  _feature_type feature;





  typedef boost::shared_ptr< ::stroll_bearnav::FeatureArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stroll_bearnav::FeatureArray_<ContainerAllocator> const> ConstPtr;

}; // struct FeatureArray_

typedef ::stroll_bearnav::FeatureArray_<std::allocator<void> > FeatureArray;

typedef boost::shared_ptr< ::stroll_bearnav::FeatureArray > FeatureArrayPtr;
typedef boost::shared_ptr< ::stroll_bearnav::FeatureArray const> FeatureArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stroll_bearnav::FeatureArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stroll_bearnav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'stroll_bearnav': ['/home/kevin/jaguar_ws/src/stroll_bearnav/msg', '/home/kevin/jaguar_ws/src/stroll_bearnav/cmake-build-debug/devel/share/stroll_bearnav/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stroll_bearnav::FeatureArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stroll_bearnav::FeatureArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stroll_bearnav::FeatureArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74b52b411857590176b1f86a6b4897da";
  }

  static const char* value(const ::stroll_bearnav::FeatureArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74b52b4118575901ULL;
  static const uint64_t static_value2 = 0x76b1f86a6b4897daULL;
};

template<class ContainerAllocator>
struct DataType< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stroll_bearnav/FeatureArray";
  }

  static const char* value(const ::stroll_bearnav::FeatureArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 distance\n\
string id \n\
stroll_bearnav/Feature[] feature\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: stroll_bearnav/Feature\n\
float32 x\n\
float32 y\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int32 octave\n\
int32 class_id\n\
float32[] descriptor\n\
float32 rating\n\
";
  }

  static const char* value(const ::stroll_bearnav::FeatureArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distance);
      stream.next(m.id);
      stream.next(m.feature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeatureArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stroll_bearnav::FeatureArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stroll_bearnav::FeatureArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "feature[]" << std::endl;
    for (size_t i = 0; i < v.feature.size(); ++i)
    {
      s << indent << "  feature[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::stroll_bearnav::Feature_<ContainerAllocator> >::stream(s, indent + "    ", v.feature[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STROLL_BEARNAV_MESSAGE_FEATUREARRAY_H
