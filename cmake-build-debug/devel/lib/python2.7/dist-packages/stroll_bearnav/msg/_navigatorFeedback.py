# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from stroll_bearnav/navigatorFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class navigatorFeedback(genpy.Message):
  _md5sum = "7b676e19f8b4915c865123ddcb157234"
  _type = "stroll_bearnav/navigatorFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
float32 distance
float32 diffRot
int32[] histogram
int32 max
int32 correct
int32 outliers
int32 keypoints_avg
int32 matches
int32[] stats

"""
  __slots__ = ['distance','diffRot','histogram','max','correct','outliers','keypoints_avg','matches','stats']
  _slot_types = ['float32','float32','int32[]','int32','int32','int32','int32','int32','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       distance,diffRot,histogram,max,correct,outliers,keypoints_avg,matches,stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navigatorFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.distance is None:
        self.distance = 0.
      if self.diffRot is None:
        self.diffRot = 0.
      if self.histogram is None:
        self.histogram = []
      if self.max is None:
        self.max = 0
      if self.correct is None:
        self.correct = 0
      if self.outliers is None:
        self.outliers = 0
      if self.keypoints_avg is None:
        self.keypoints_avg = 0
      if self.matches is None:
        self.matches = 0
      if self.stats is None:
        self.stats = []
    else:
      self.distance = 0.
      self.diffRot = 0.
      self.histogram = []
      self.max = 0
      self.correct = 0
      self.outliers = 0
      self.keypoints_avg = 0
      self.matches = 0
      self.stats = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.distance, _x.diffRot))
      length = len(self.histogram)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.histogram))
      _x = self
      buff.write(_get_struct_5i().pack(_x.max, _x.correct, _x.outliers, _x.keypoints_avg, _x.matches))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.stats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.distance, _x.diffRot,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.histogram = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 20
      (_x.max, _x.correct, _x.outliers, _x.keypoints_avg, _x.matches,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.distance, _x.diffRot))
      length = len(self.histogram)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.histogram.tostring())
      _x = self
      buff.write(_get_struct_5i().pack(_x.max, _x.correct, _x.outliers, _x.keypoints_avg, _x.matches))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.stats.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.distance, _x.diffRot,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.histogram = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.max, _x.correct, _x.outliers, _x.keypoints_avg, _x.matches,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
