# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from stroll_bearnav/loadMapFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class loadMapFeedback(genpy.Message):
  _md5sum = "ad02e9dc7b7886909443644d024fde29"
  _type = "stroll_bearnav/loadMapFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
string fileName
float32 distance 
int32 numFeatures
int32 numberOfMaps
int32 mapIndex

"""
  __slots__ = ['fileName','distance','numFeatures','numberOfMaps','mapIndex']
  _slot_types = ['string','float32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fileName,distance,numFeatures,numberOfMaps,mapIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(loadMapFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fileName is None:
        self.fileName = ''
      if self.distance is None:
        self.distance = 0.
      if self.numFeatures is None:
        self.numFeatures = 0
      if self.numberOfMaps is None:
        self.numberOfMaps = 0
      if self.mapIndex is None:
        self.mapIndex = 0
    else:
      self.fileName = ''
      self.distance = 0.
      self.numFeatures = 0
      self.numberOfMaps = 0
      self.mapIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.fileName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f3i().pack(_x.distance, _x.numFeatures, _x.numberOfMaps, _x.mapIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fileName = str[start:end].decode('utf-8')
      else:
        self.fileName = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.distance, _x.numFeatures, _x.numberOfMaps, _x.mapIndex,) = _get_struct_f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.fileName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f3i().pack(_x.distance, _x.numFeatures, _x.numberOfMaps, _x.mapIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fileName = str[start:end].decode('utf-8')
      else:
        self.fileName = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.distance, _x.numFeatures, _x.numberOfMaps, _x.mapIndex,) = _get_struct_f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f3i = None
def _get_struct_f3i():
    global _struct_f3i
    if _struct_f3i is None:
        _struct_f3i = struct.Struct("<f3i")
    return _struct_f3i
