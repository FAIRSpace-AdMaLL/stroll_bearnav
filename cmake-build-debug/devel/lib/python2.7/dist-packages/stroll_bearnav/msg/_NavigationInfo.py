# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from stroll_bearnav/NavigationInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import stroll_bearnav.msg
import std_msgs.msg

class NavigationInfo(genpy.Message):
  _md5sum = "82d671060d2954f62b3d0cce462cfb6c"
  _type = "stroll_bearnav/NavigationInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 ratio                           #matching ratio
stroll_bearnav/FeatureArray map         #features from the current map
stroll_bearnav/FeatureArray view	#features from the current view
int32[] histogram    			#navigation histogram
int32[] mapMatchIndex			#contains indices of 'view' features corresponding to a given mapFeature
int32[] mapMatchEval			#contains information of mapFeatures - correct 1, incorrect -1, unmatched 0
int32 correct                   	#number of correct matches
int32 matches                   	#number of good matches
float32 distance                	#traveled distance
float32 diffRot                 	#difference between features
int32 mapChanges                	#number of traversals
bool updated                    	#map contains rating

================================================================================
MSG: stroll_bearnav/FeatureArray
Header header
float32 distance
string id 
stroll_bearnav/Feature[] feature

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: stroll_bearnav/Feature
float32 x
float32 y
float32 size
float32 angle
float32 response
int32 octave
int32 class_id
float32[] descriptor
float32 rating
"""
  __slots__ = ['ratio','map','view','histogram','mapMatchIndex','mapMatchEval','correct','matches','distance','diffRot','mapChanges','updated']
  _slot_types = ['float32','stroll_bearnav/FeatureArray','stroll_bearnav/FeatureArray','int32[]','int32[]','int32[]','int32','int32','float32','float32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ratio,map,view,histogram,mapMatchIndex,mapMatchEval,correct,matches,distance,diffRot,mapChanges,updated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavigationInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ratio is None:
        self.ratio = 0.
      if self.map is None:
        self.map = stroll_bearnav.msg.FeatureArray()
      if self.view is None:
        self.view = stroll_bearnav.msg.FeatureArray()
      if self.histogram is None:
        self.histogram = []
      if self.mapMatchIndex is None:
        self.mapMatchIndex = []
      if self.mapMatchEval is None:
        self.mapMatchEval = []
      if self.correct is None:
        self.correct = 0
      if self.matches is None:
        self.matches = 0
      if self.distance is None:
        self.distance = 0.
      if self.diffRot is None:
        self.diffRot = 0.
      if self.mapChanges is None:
        self.mapChanges = 0
      if self.updated is None:
        self.updated = False
    else:
      self.ratio = 0.
      self.map = stroll_bearnav.msg.FeatureArray()
      self.view = stroll_bearnav.msg.FeatureArray()
      self.histogram = []
      self.mapMatchIndex = []
      self.mapMatchEval = []
      self.correct = 0
      self.matches = 0
      self.distance = 0.
      self.diffRot = 0.
      self.mapChanges = 0
      self.updated = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_f3I().pack(_x.ratio, _x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs))
      _x = self.map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.map.distance))
      _x = self.map.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.map.feature)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.feature:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.descriptor))
        buff.write(_get_struct_f().pack(val1.rating))
      _x = self
      buff.write(_get_struct_3I().pack(_x.view.header.seq, _x.view.header.stamp.secs, _x.view.header.stamp.nsecs))
      _x = self.view.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.view.distance))
      _x = self.view.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.view.feature)
      buff.write(_struct_I.pack(length))
      for val1 in self.view.feature:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.descriptor))
        buff.write(_get_struct_f().pack(val1.rating))
      length = len(self.histogram)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.histogram))
      length = len(self.mapMatchIndex)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.mapMatchIndex))
      length = len(self.mapMatchEval)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.mapMatchEval))
      _x = self
      buff.write(_get_struct_2i2fiB().pack(_x.correct, _x.matches, _x.distance, _x.diffRot, _x.mapChanges, _x.updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.map is None:
        self.map = stroll_bearnav.msg.FeatureArray()
      if self.view is None:
        self.view = stroll_bearnav.msg.FeatureArray()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ratio, _x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs,) = _get_struct_f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.map.distance,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.id = str[start:end].decode('utf-8')
      else:
        self.map.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.feature = []
      for i in range(0, length):
        val1 = stroll_bearnav.msg.Feature()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.rating,) = _get_struct_f().unpack(str[start:end])
        self.map.feature.append(val1)
      _x = self
      start = end
      end += 12
      (_x.view.header.seq, _x.view.header.stamp.secs, _x.view.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.view.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.view.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.view.distance,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.view.id = str[start:end].decode('utf-8')
      else:
        self.view.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.view.feature = []
      for i in range(0, length):
        val1 = stroll_bearnav.msg.Feature()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.rating,) = _get_struct_f().unpack(str[start:end])
        self.view.feature.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.histogram = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.mapMatchIndex = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.mapMatchEval = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 21
      (_x.correct, _x.matches, _x.distance, _x.diffRot, _x.mapChanges, _x.updated,) = _get_struct_2i2fiB().unpack(str[start:end])
      self.updated = bool(self.updated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_f3I().pack(_x.ratio, _x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs))
      _x = self.map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.map.distance))
      _x = self.map.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.map.feature)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.feature:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.descriptor.tostring())
        buff.write(_get_struct_f().pack(val1.rating))
      _x = self
      buff.write(_get_struct_3I().pack(_x.view.header.seq, _x.view.header.stamp.secs, _x.view.header.stamp.nsecs))
      _x = self.view.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_f().pack(self.view.distance))
      _x = self.view.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.view.feature)
      buff.write(_struct_I.pack(length))
      for val1 in self.view.feature:
        _x = val1
        buff.write(_get_struct_5f2i().pack(_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id))
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.descriptor.tostring())
        buff.write(_get_struct_f().pack(val1.rating))
      length = len(self.histogram)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.histogram.tostring())
      length = len(self.mapMatchIndex)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.mapMatchIndex.tostring())
      length = len(self.mapMatchEval)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.mapMatchEval.tostring())
      _x = self
      buff.write(_get_struct_2i2fiB().pack(_x.correct, _x.matches, _x.distance, _x.diffRot, _x.mapChanges, _x.updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.map is None:
        self.map = stroll_bearnav.msg.FeatureArray()
      if self.view is None:
        self.view = stroll_bearnav.msg.FeatureArray()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ratio, _x.map.header.seq, _x.map.header.stamp.secs, _x.map.header.stamp.nsecs,) = _get_struct_f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.map.distance,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.id = str[start:end].decode('utf-8')
      else:
        self.map.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.feature = []
      for i in range(0, length):
        val1 = stroll_bearnav.msg.Feature()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.rating,) = _get_struct_f().unpack(str[start:end])
        self.map.feature.append(val1)
      _x = self
      start = end
      end += 12
      (_x.view.header.seq, _x.view.header.stamp.secs, _x.view.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.view.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.view.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.view.distance,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.view.id = str[start:end].decode('utf-8')
      else:
        self.view.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.view.feature = []
      for i in range(0, length):
        val1 = stroll_bearnav.msg.Feature()
        _x = val1
        start = end
        end += 28
        (_x.x, _x.y, _x.size, _x.angle, _x.response, _x.octave, _x.class_id,) = _get_struct_5f2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.rating,) = _get_struct_f().unpack(str[start:end])
        self.view.feature.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.histogram = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.mapMatchIndex = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.mapMatchEval = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 21
      (_x.correct, _x.matches, _x.distance, _x.diffRot, _x.mapChanges, _x.updated,) = _get_struct_2i2fiB().unpack(str[start:end])
      self.updated = bool(self.updated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f3I = None
def _get_struct_f3I():
    global _struct_f3I
    if _struct_f3I is None:
        _struct_f3I = struct.Struct("<f3I")
    return _struct_f3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2i2fiB = None
def _get_struct_2i2fiB():
    global _struct_2i2fiB
    if _struct_2i2fiB is None:
        _struct_2i2fiB = struct.Struct("<2i2fiB")
    return _struct_2i2fiB
_struct_5f2i = None
def _get_struct_5f2i():
    global _struct_5f2i
    if _struct_5f2i is None:
        _struct_5f2i = struct.Struct("<5f2i")
    return _struct_5f2i
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
