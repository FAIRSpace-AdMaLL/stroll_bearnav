// Auto-generated. Do not edit!

// (in-package stroll_bearnav.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class loadMapFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.fileName = null;
      this.distance = null;
      this.numFeatures = null;
      this.numberOfMaps = null;
      this.mapIndex = null;
    }
    else {
      if (initObj.hasOwnProperty('fileName')) {
        this.fileName = initObj.fileName
      }
      else {
        this.fileName = '';
      }
      if (initObj.hasOwnProperty('distance')) {
        this.distance = initObj.distance
      }
      else {
        this.distance = 0.0;
      }
      if (initObj.hasOwnProperty('numFeatures')) {
        this.numFeatures = initObj.numFeatures
      }
      else {
        this.numFeatures = 0;
      }
      if (initObj.hasOwnProperty('numberOfMaps')) {
        this.numberOfMaps = initObj.numberOfMaps
      }
      else {
        this.numberOfMaps = 0;
      }
      if (initObj.hasOwnProperty('mapIndex')) {
        this.mapIndex = initObj.mapIndex
      }
      else {
        this.mapIndex = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type loadMapFeedback
    // Serialize message field [fileName]
    bufferOffset = _serializer.string(obj.fileName, buffer, bufferOffset);
    // Serialize message field [distance]
    bufferOffset = _serializer.float32(obj.distance, buffer, bufferOffset);
    // Serialize message field [numFeatures]
    bufferOffset = _serializer.int32(obj.numFeatures, buffer, bufferOffset);
    // Serialize message field [numberOfMaps]
    bufferOffset = _serializer.int32(obj.numberOfMaps, buffer, bufferOffset);
    // Serialize message field [mapIndex]
    bufferOffset = _serializer.int32(obj.mapIndex, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type loadMapFeedback
    let len;
    let data = new loadMapFeedback(null);
    // Deserialize message field [fileName]
    data.fileName = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [distance]
    data.distance = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [numFeatures]
    data.numFeatures = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [numberOfMaps]
    data.numberOfMaps = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [mapIndex]
    data.mapIndex = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.fileName.length;
    return length + 20;
  }

  static datatype() {
    // Returns string type for a message object
    return 'stroll_bearnav/loadMapFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ad02e9dc7b7886909443644d024fde29';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback
    string fileName
    float32 distance 
    int32 numFeatures
    int32 numberOfMaps
    int32 mapIndex
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new loadMapFeedback(null);
    if (msg.fileName !== undefined) {
      resolved.fileName = msg.fileName;
    }
    else {
      resolved.fileName = ''
    }

    if (msg.distance !== undefined) {
      resolved.distance = msg.distance;
    }
    else {
      resolved.distance = 0.0
    }

    if (msg.numFeatures !== undefined) {
      resolved.numFeatures = msg.numFeatures;
    }
    else {
      resolved.numFeatures = 0
    }

    if (msg.numberOfMaps !== undefined) {
      resolved.numberOfMaps = msg.numberOfMaps;
    }
    else {
      resolved.numberOfMaps = 0
    }

    if (msg.mapIndex !== undefined) {
      resolved.mapIndex = msg.mapIndex;
    }
    else {
      resolved.mapIndex = 0
    }

    return resolved;
    }
};

module.exports = loadMapFeedback;
